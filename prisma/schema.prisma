generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_UR L") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

model Product {
  id       String   @id @default(cuid())
  name     String
  vintage  String
  varietal String
  region   String?
  brandId  String
  bottles  Bottle[]
  brand    Brand    @relation(fields: [brandId], references: [id])
}

model Brand {
  id       String    @id @default(cuid())
  name     String
  type     BrandType
  products Product[]
}

model Bottle {
  id              String     @id @default(cuid())
  size            Float?
  servingSize     Float?
  purchasePrice   Float?
  purchaseDate    DateTime?
  openDate        DateTime?
  finished        Boolean?
  finishDate      DateTime?
  amountRemaining Float?
  notes           String?
  userId          String
  user            User       @relation(fields: [userId], references: [id])
  productId       String
  product         Product    @relation(fields: [productId], references: [id])
  shelfItem       ShelfItem?
}

model Stash {
  id       String  @id @default(cuid())
  name     String
  location String
  type     String
  userId   String
  user     User    @relation(fields: [userId], references: [id])
  shelves  Shelf[]
}

model Shelf {
  id         String      @id @default(cuid())
  name       String
  order      Int?
  capacity   Int
  stashId    String?
  temp       Float
  stash      Stash?      @relation(fields: [stashId], references: [id], onDelete: Cascade)
  shelfItems ShelfItem[]
}

model ShelfItem {
  id       String @id @default(cuid())
  order    Int
  bottleId String @unique
  shelfId  String
  bottle   Bottle @relation(fields: [bottleId], references: [id])
  shelf    Shelf  @relation(fields: [shelfId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String // ! should maybe be Int?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  bottles       Bottle[]
  sessions      Session[]
  stash         Stash[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BrandType {
  SPIRIT
  WINE
  BEER
}
