generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_UR L") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

// model Wine {
//   id       String   @id @default(cuid())
//   name     String
//   vintage  String
//   varietal String
//   wineryId String
//   bottles  Bottle[]
//   winery   Winery   @relation(fields: [wineryId], references: [id])
// }

// model Winery {
//   id    String @id @default(cuid())
//   name  String
//   wines Wine[]
// }

model Product {
  id       String   @id @default(cuid())
  name     String
  vintage  String
  varietal String
  brandId String
  bottles  Bottle[]
  brand   Brand   @relation(fields: [brandId], references: [id])
}

model Brand {
  id    String @id @default(cuid())
  name  String
  products Product[]
}

model Bottle {
  id           String   @id @default(cuid())
  productId       String
  size         String
  price        Float
  purchaseDate DateTime
  drinkDate    DateTime
  notes        String
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  product         Product     @relation(fields: [productId], references: [id])
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String // ! should maybe be Int?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  bottles       Bottle[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
